# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:08:11+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class ActingUser(BaseModel):
    email: Optional[str] = Field(
        None,
        description='The email address of the user when the user performed the action.',
    )
    imageUrl: Optional[str] = Field(
        None,
        description='A profile image URL for the user. May not be present if the user has changed their email address or deleted their account.',
    )


class CertDnsChallenge(BaseModel):
    domainName: Optional[str] = Field(
        None,
        description='The domain name upon which the DNS challenge must be satisfied.',
    )
    token: Optional[str] = Field(
        None,
        description='The value that must be present as a TXT record on the domain name to satisfy the challenge.',
    )


class CertHttpChallenge(BaseModel):
    path: Optional[str] = Field(
        None,
        description='The URL path on which to serve the specified token to satisfy the certificate challenge.',
    )
    token: Optional[str] = Field(
        None,
        description='The token to serve at the specified URL path to satisfy the certificate challenge.',
    )


class CloudRunRewrite(BaseModel):
    region: Optional[str] = Field(
        None,
        description='Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.',
    )
    serviceId: Optional[str] = Field(
        None, description='Required. User-defined ID of the Cloud Run service.'
    )


class Status(Enum):
    DOMAIN_STATUS_UNSPECIFIED = 'DOMAIN_STATUS_UNSPECIFIED'
    DOMAIN_CHANGE_PENDING = 'DOMAIN_CHANGE_PENDING'
    DOMAIN_ACTIVE = 'DOMAIN_ACTIVE'
    DOMAIN_VERIFICATION_REQUIRED = 'DOMAIN_VERIFICATION_REQUIRED'
    DOMAIN_VERIFICATION_LOST = 'DOMAIN_VERIFICATION_LOST'


class CertStatus(Enum):
    CERT_STATUS_UNSPECIFIED = 'CERT_STATUS_UNSPECIFIED'
    CERT_PENDING = 'CERT_PENDING'
    CERT_MISSING = 'CERT_MISSING'
    CERT_PROCESSING = 'CERT_PROCESSING'
    CERT_PROPAGATING = 'CERT_PROPAGATING'
    CERT_ACTIVE = 'CERT_ACTIVE'
    CERT_ERROR = 'CERT_ERROR'


class DnsStatus(Enum):
    DNS_STATUS_UNSPECIFIED = 'DNS_STATUS_UNSPECIFIED'
    DNS_PENDING = 'DNS_PENDING'
    DNS_MISSING = 'DNS_MISSING'
    DNS_PARTIAL_MATCH = 'DNS_PARTIAL_MATCH'
    DNS_MATCH = 'DNS_MATCH'
    DNS_EXTRANEOUS_MATCH = 'DNS_EXTRANEOUS_MATCH'


class DomainProvisioning(BaseModel):
    certChallengeDiscoveredTxt: Optional[List[str]] = Field(
        None,
        description='The TXT records (for the certificate challenge) that were found at the last DNS fetch.',
    )
    certChallengeDns: Optional[CertDnsChallenge] = Field(
        None, description='The DNS challenge for generating a certificate.'
    )
    certChallengeHttp: Optional[CertHttpChallenge] = Field(
        None, description='The HTTP challenge for generating a certificate.'
    )
    certStatus: Optional[CertStatus] = Field(
        None,
        description='The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.',
    )
    discoveredIps: Optional[List[str]] = Field(
        None, description='The IPs found at the last DNS fetch.'
    )
    dnsFetchTime: Optional[str] = Field(
        None, description='The time at which the last DNS fetch occurred.'
    )
    dnsStatus: Optional[DnsStatus] = Field(
        None, description='The DNS record match status as of the last DNS fetch.'
    )
    expectedIps: Optional[List[str]] = Field(
        None, description='The list of IPs to which the domain is expected to resolve.'
    )


class Type(Enum):
    REDIRECT_TYPE_UNSPECIFIED = 'REDIRECT_TYPE_UNSPECIFIED'
    MOVED_PERMANENTLY = 'MOVED_PERMANENTLY'


class DomainRedirect(BaseModel):
    domainName: Optional[str] = Field(
        None, description='Required. The domain name to redirect to.'
    )
    type: Optional[Type] = Field(
        None, description='Required. The redirect status code.'
    )


class Empty(BaseModel):
    pass


class Header(BaseModel):
    glob: Optional[str] = Field(
        None,
        description='The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.',
    )
    headers: Optional[Dict[str, str]] = Field(
        None, description='Required. The additional headers to add to the response.'
    )
    regex: Optional[str] = Field(
        None,
        description='The user-supplied RE2 regular expression to match against the request URL path.',
    )


class I18nConfig(BaseModel):
    root: Optional[str] = Field(
        None,
        description='Required. The user-supplied path where country and language specific content will be looked for within the public directory.',
    )


class PathFilter(BaseModel):
    regexes: Optional[List[str]] = Field(
        None, description='An array of RegEx values by which to filter.'
    )


class PopulateVersionFilesRequest(BaseModel):
    files: Optional[Dict[str, str]] = Field(
        None,
        description='A set of file paths to the hashes corresponding to assets that should be added to the version. A file path to an empty hash will remove the path from the version. Calculate a hash by Gzipping the file then taking the SHA256 hash of the newly compressed file.',
    )


class PopulateVersionFilesResponse(BaseModel):
    uploadRequiredHashes: Optional[List[str]] = Field(
        None,
        description='The content hashes of the specified files that need to be uploaded to the specified URL.',
    )
    uploadUrl: Optional[str] = Field(
        None,
        description='The URL to which the files should be uploaded, in the format: "https://upload-firebasehosting.googleapis.com/upload/sites/SITE_ID /versions/VERSION_ID/files" Perform a multipart `POST` of the Gzipped file contents to the URL using a forward slash and the hash of the file appended to the end.',
    )


class Redirect(BaseModel):
    glob: Optional[str] = Field(
        None,
        description='The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.',
    )
    location: Optional[str] = Field(
        None,
        description='Required. The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"',
    )
    regex: Optional[str] = Field(
        None,
        description='The user-supplied RE2 regular expression to match against the request URL path.',
    )
    statusCode: Optional[int] = Field(
        None,
        description='Required. The status HTTP code to return in the response. It must be a valid 3xx status code.',
    )


class Type1(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    DEPLOY = 'DEPLOY'
    ROLLBACK = 'ROLLBACK'
    SITE_DISABLE = 'SITE_DISABLE'


class Rewrite(BaseModel):
    dynamicLinks: Optional[bool] = Field(
        None, description='The request will be forwarded to Firebase Dynamic Links.'
    )
    function: Optional[str] = Field(
        None,
        description='The function to proxy requests to. Must match the exported function name exactly.',
    )
    functionRegion: Optional[str] = Field(
        None,
        description='Optional. Specify a Cloud region for rewritten Functions invocations. If not provided, defaults to us-central1.',
    )
    glob: Optional[str] = Field(
        None,
        description='The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.',
    )
    path: Optional[str] = Field(
        None, description='The URL path to rewrite the request to.'
    )
    regex: Optional[str] = Field(
        None,
        description='The user-supplied RE2 regular expression to match against the request URL path.',
    )
    run: Optional[CloudRunRewrite] = Field(
        None, description='The request will be forwarded to Cloud Run.'
    )


class AppAssociation(Enum):
    AUTO = 'AUTO'
    NONE = 'NONE'


class TrailingSlashBehavior(Enum):
    TRAILING_SLASH_BEHAVIOR_UNSPECIFIED = 'TRAILING_SLASH_BEHAVIOR_UNSPECIFIED'
    ADD = 'ADD'
    REMOVE = 'REMOVE'


class ServingConfig(BaseModel):
    appAssociation: Optional[AppAssociation] = Field(
        None, description='How to handle well known App Association files.'
    )
    cleanUrls: Optional[bool] = Field(
        None,
        description='Defines whether to drop the file extension from uploaded files.',
    )
    headers: Optional[List[Header]] = Field(
        None,
        description='An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.',
    )
    i18n: Optional[I18nConfig] = Field(
        None, description='Optional. Defines i18n rewrite behavior.'
    )
    redirects: Optional[List[Redirect]] = Field(
        None,
        description='An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.',
    )
    rewrites: Optional[List[Rewrite]] = Field(
        None,
        description='An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.',
    )
    trailingSlashBehavior: Optional[TrailingSlashBehavior] = Field(
        None, description='Defines how to handle a trailing slash in the URL path.'
    )


class Type2(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    DEFAULT_SITE = 'DEFAULT_SITE'
    USER_SITE = 'USER_SITE'


class Site(BaseModel):
    appId: Optional[str] = Field(
        None,
        description='Optional. The [ID of a Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id) associated with the Hosting site.',
    )
    defaultUrl: Optional[str] = Field(
        None, description='Output only. The default URL for the Hosting site.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. User-specified labels for the Hosting site.'
    )
    name: Optional[str] = Field(
        None,
        description="Output only. The fully-qualified resource name of the Hosting site, in the format: projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's [`ProjectNumber`](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).",
    )
    type: Optional[Type2] = Field(
        None,
        description='Output only. The type of Hosting site. Every Firebase project has a `DEFAULT_SITE`, which is created when Hosting is provisioned for the project. All additional sites are `USER_SITE`.',
    )


class SiteConfig(BaseModel):
    cloudLoggingEnabled: Optional[bool] = Field(
        None,
        description='Whether or not web requests made by site visitors are logged via Cloud Logging.',
    )
    maxVersions: Optional[str] = Field(
        None,
        description='The number of FINALIZED versions that will be held for a site before automatic deletion. When a new version is deployed, content for versions in storage in excess of this number will be deleted, and will no longer be billed for storage usage. Oldest versions will be deleted first; sites are created with an unlimited number of max_versions by default.',
    )


class StatusModel(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class Status1(Enum):
    VERSION_STATUS_UNSPECIFIED = 'VERSION_STATUS_UNSPECIFIED'
    CREATED = 'CREATED'
    FINALIZED = 'FINALIZED'
    DELETED = 'DELETED'
    ABANDONED = 'ABANDONED'
    EXPIRED = 'EXPIRED'
    CLONING = 'CLONING'


class Version(BaseModel):
    config: Optional[ServingConfig] = Field(
        None,
        description='The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which the version was created.'
    )
    createUser: Optional[ActingUser] = Field(
        None, description='Output only. Identifies the user who created the version.'
    )
    deleteTime: Optional[str] = Field(
        None, description='Output only. The time at which the version was `DELETED`.'
    )
    deleteUser: Optional[ActingUser] = Field(
        None, description='Output only. Identifies the user who `DELETED` the version.'
    )
    fileCount: Optional[str] = Field(
        None,
        description='Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.',
    )
    finalizeTime: Optional[str] = Field(
        None, description='Output only. The time at which the version was `FINALIZED`.'
    )
    finalizeUser: Optional[ActingUser] = Field(
        None,
        description='Output only. Identifies the user who `FINALIZED` the version.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='The labels used for extra metadata and/or filtering.'
    )
    name: Optional[str] = Field(
        None,
        description='The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).',
    )
    status: Optional[Status1] = Field(
        None,
        description='The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).',
    )
    versionBytes: Optional[str] = Field(
        None,
        description='Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.',
    )


class Status2(Enum):
    STATUS_UNSPECIFIED = 'STATUS_UNSPECIFIED'
    EXPECTED = 'EXPECTED'
    ACTIVE = 'ACTIVE'


class VersionFile(BaseModel):
    hash: Optional[str] = Field(
        None, description='The SHA256 content hash of the file.'
    )
    path: Optional[str] = Field(
        None, description="The URI at which the file's content should display."
    )
    status: Optional[Status2] = Field(
        None,
        description='Output only. The current status of a particular file in the specified version. The value will be either `pending upload` or `uploaded`.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class CloneVersionRequest(BaseModel):
    exclude: Optional[PathFilter] = Field(
        None,
        description='If provided, only paths that do not match any of the RegEx values in this list will be included in the new version.',
    )
    finalize: Optional[bool] = Field(
        None,
        description='If true, the call to `CloneVersion` immediately finalizes the version after cloning is complete. If false, the cloned version will have a status of `CREATED`. Use [`UpdateVersion`](patch) to set the status of the version to `FINALIZED`.',
    )
    include: Optional[PathFilter] = Field(
        None,
        description='If provided, only paths that match one or more RegEx values in this list will be included in the new version.',
    )
    sourceVersion: Optional[str] = Field(
        None,
        description='Required. The unique identifier for the version to be cloned, in the format: sites/SITE_ID/versions/VERSION_ID',
    )


class Domain(BaseModel):
    domainName: Optional[str] = Field(
        None, description='Required. The domain name of the association.'
    )
    domainRedirect: Optional[DomainRedirect] = Field(
        None,
        description='If set, the domain should redirect with the provided parameters.',
    )
    provisioning: Optional[DomainProvisioning] = Field(
        None,
        description='Output only. Information about the provisioning of certificates and the health of the DNS resolution for the domain.',
    )
    site: Optional[str] = Field(
        None, description='Required. The site name of the association.'
    )
    status: Optional[Status] = Field(
        None, description='Output only. Additional status of the domain association.'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time at which the domain was last updated.'
    )


class ListDomainsResponse(BaseModel):
    domains: Optional[List[Domain]] = Field(
        None, description='The list of domains, if any exist.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='The pagination token, if more results exist.'
    )


class ListSitesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListSites`. Page tokens are short-lived and should not be stored.',
    )
    sites: Optional[List[Site]] = Field(
        None,
        description='A list of Site objects associated with the specified Firebase project.',
    )


class ListVersionFilesResponse(BaseModel):
    files: Optional[List[VersionFile]] = Field(
        None,
        description=' The list of paths to the hashes of the files in the specified version.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListVersionFiles`. Page tokens are short-lived and should not be stored.',
    )


class ListVersionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListVersions`. Page tokens are short-lived and should not be stored.',
    )
    versions: Optional[List[Version]] = Field(
        None, description='The list of versions, if any exist.'
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[StatusModel] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Release(BaseModel):
    message: Optional[str] = Field(
        None,
        description='The deploy description when the release was created. The value can be up to 512 characters.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).',
    )
    releaseTime: Optional[str] = Field(
        None,
        description='Output only. The time at which the version is set to be public.',
    )
    releaseUser: Optional[ActingUser] = Field(
        None, description='Output only. Identifies the user who created the release.'
    )
    type: Optional[Type1] = Field(
        None,
        description='Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.',
    )
    version: Optional[Version] = Field(
        None,
        description='Output only. The configuration and content that was released.',
    )


class Channel(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time at which the channel was created.'
    )
    expireTime: Optional[str] = Field(
        None,
        description="The time at which the channel will be automatically deleted. If null, the channel will not be automatically deleted. This field is present in the output whether it's set directly or via the `ttl` field.",
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Text labels used for extra metadata and/or filtering.'
    )
    name: Optional[str] = Field(
        None,
        description='The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID',
    )
    release: Optional[Release] = Field(
        None, description='Output only. The current release for the channel, if any.'
    )
    retainedReleaseCount: Optional[int] = Field(
        None,
        description='The number of previous releases to retain on the channel for rollback or other purposes. Must be a number between 1-100. Defaults to 10 for new channels.',
    )
    ttl: Optional[str] = Field(
        None,
        description='Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past the time of the request.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time at which the channel was last updated.'
    )
    url: Optional[str] = Field(
        None,
        description="Output only. The URL at which the content of this channel's current release can be viewed. This URL is a Firebase-provided subdomain of `web.app`. The content of this channel's current release can also be viewed at the Firebase-provided subdomain of `firebaseapp.com`. If this channel is the `live` channel for the Hosting site, then the content of this channel's current release can also be viewed at any connected custom domains.",
    )


class ListChannelsResponse(BaseModel):
    channels: Optional[List[Channel]] = Field(None, description='The list of channels.')
    nextPageToken: Optional[str] = Field(
        None,
        description='The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListChannels`. Page tokens are short-lived and should not be stored.',
    )


class ListReleasesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='The pagination token, if more results exist beyond the ones in this response. Include this token in your next call to `ListReleases`. Page tokens are short-lived and should not be stored.',
    )
    releases: Optional[List[Release]] = Field(
        None,
        description='The list of hashes of files that still need to be uploaded, if any exist.',
    )
